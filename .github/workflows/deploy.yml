# name: Deploy to ECS

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# jobs:
#   build-and-push:
#     name: Deploy to Amazon ECS
#     runs-on: ubuntu-latest
#     environment: cicd
#     permissions:
#       id-token: write
#       contents: read

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4.1.0
#         with:
#           role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-role
#           role-session-name: markdowntailor-deploy
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build, tag, and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         run: |
#           # Build a docker container and push it to ECR
#           docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:latest .
#           docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:latest
#           echo "image=$ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:latest" >> $GITHUB_OUTPUT

#       - name: Download task definition
#         env:
#           TASK_DEFINITION: ${{ secrets.TASK_DEFINITION }}
#         run: |
#           aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query taskDefinition > task-definition.json

#       - name: Fill in the new image ID in the Amazon ECS task definition
#         id: task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: task-definition.json
#           container-name: ${{ secrets.CONTAINER_NAME }}
#           image: ${{ steps.build-image.outputs.image }}

#       - name: Deploy Amazon ECS task definition
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v2
#         with:
#           task-definition: ${{ steps.task-def.outputs.task-definition }}
#           service: ${{ secrets.ECS_SERVICE }}
#           cluster: ${{ secrets.ECS_CLUSTER }}
#           wait-for-service-stability: true
