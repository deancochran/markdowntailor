name: Build and Push Docker Image

on:
  push:
    branches-ignore:
      - "main"

jobs:
  build_and_push:
    name: Build and Push
    runs-on: ubuntu-latest
    environment: development

    # Permissions are required to push to GitHub Container Registry
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Use a specific version to match your Dockerfile
      - uses: pnpm/action-setup@v3
        with:
          version: 8 # Specify your pnpm version

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint and Type Check
        run: |
          pnpm run lint
          pnpm run typecheck

      # This build step is optional if your Dockerfile handles the build.
      # Running it here can catch build errors before the Docker build starts.
      - name: Build app for validation
        run: pnpm run build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    environment: testing

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install test runner dependencies
        run: pnpm install --frozen-lockfile

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Docker container from built image
        run: |
          docker run -d \
            --name test-app-container \
            --network host \
            -e NODE_ENV=development \
            -e NEXT_PUBLIC_BASE_URL="http://localhost:80" \
            # MODIFIED: Appended ?sslmode=require to the database URLs
            -e DATABASE_URL=postgres://postgres:postgres@localhost:5432/db?sslmode=require \
            -e AUTH_DRIZZLE_URL=postgres://postgres:postgres@localhost:5432/db?sslmode=require \
            -e AUTH_SECRET="${{ secrets.AUTH_SECRET }}" \
            -e AUTH_TRUST_HOST=true \
            -e AUTH_URL="http://localhost:80/api/auth" \
            -e AUTH_GITHUB_ID="${{ secrets.AUTH_GITHUB_ID }}" \
            -e AUTH_GITHUB_SECRET="${{ secrets.AUTH_GITHUB_SECRET }}" \
            -e AUTH_LINKEDIN_ID="${{ secrets.AUTH_LINKEDIN_ID }}" \
            -e AUTH_LINKEDIN_SECRET="${{ secrets.AUTH_LINKEDIN_SECRET }}" \
            -e AUTH_GOOGLE_ID="${{ secrets.AUTH_GOOGLE_ID }}" \
            -e AUTH_GOOGLE_SECRET="${{ secrets.AUTH_GOOGLE_SECRET }}" \
            -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            -e ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" \
            -e UPSTASH_REDIS_REST_URL="${{ secrets.UPSTASH_REDIS_REST_URL }}" \
            -e UPSTASH_REDIS_REST_TOKEN="${{ secrets.UPSTASH_REDIS_REST_TOKEN }}" \
            -e SENTRY_AUTH_TOKEN="${{ secrets.SENTRY_AUTH_TOKEN }}" \
            -e SENTRY_ORG="${{ secrets.SENTRY_ORG }}" \
            -e SENTRY_PROJECT="${{ secrets.SENTRY_PROJECT }}" \
            -e SENTRY_DNS="${{ secrets.SENTRY_DNS }}" \
            -e STRIPE_SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" \
            -e STRIPE_PUBLIC_KEY="${{ secrets.STRIPE_PUBLIC_KEY }}" \
            -e STRIPE_WEBHOOK_SECRET="${{ secrets.STRIPE_WEBHOOK_SECRET }}" \
            -e STRIPE_ALPHA_PRICE_ID="${{ secrets.STRIPE_ALPHA_PRICE_ID }}" \
            -e ALPHA_ACCESS_CUTOFF_DATE="${{ secrets.ALPHA_ACCESS_CUTOFF_DATE }}" \
            ${{ needs.build.outputs.image_tag }}

      - name: Wait for application to be ready
        run: |
          echo "Waiting for application to start..."
          timeout 60 bash -c 'until curl -f http://localhost:80/health 2>/dev/null; do sleep 2; done' || {
            echo "Application failed to start, checking logs:"
            docker logs test-app-container
            exit 1
          }

      - name: Run production tests
        run: |
          export TEST_BASE_URL=http://localhost:80
          pnpm run test

      - name: Cleanup container
        if: always()
        run: |
          docker logs test-app-container || true
          docker stop test-app-container || true
          docker rm test-app-container || true
