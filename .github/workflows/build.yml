name: Build and Push Docker Image

on:
  push:
    branches-ignore:
      - "main"

jobs:
  build_and_push:
    name: Build and Push
    runs-on: ubuntu-latest
    environment: development

    # Permissions are required to push to GitHub Container Registry
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Use a specific version to match your Dockerfile
      - uses: pnpm/action-setup@v3
        with:
          version: 8 # Specify your pnpm version

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Lint and Type Check
        run: |
          pnpm run lint
          pnpm run typecheck

      # This build step is optional if your Dockerfile handles the build.
      # Running it here can catch build errors before the Docker build starts.
      - name: Build app for validation
        run: pnpm run build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
