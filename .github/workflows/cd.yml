name: CD - Deploy to AWS on Merge to Main

on:
  push:
    branches:
      - main

jobs:
  deploy:
    timeout-minutes: 30
    name: Build & Deploy
    runs-on: ubuntu-latest
    environment: production # Use the production environment defined in GitHub

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build app
        run: pnpm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Use stored Credentials
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Use stored Credentials
          aws-region: ${{ secrets.AWS_REGION }} # Environment variable stored in Secrets

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ secrets.CONTAINER_NAME }} .
          docker tag ${{ secrets.CONTAINER_NAME }}:latest \
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}

      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}

      - name: Run db:migrate on the new image in ECS
        id: run_migrate
        run: |
          export CLUSTER_NAME=${{ secrets.ECS_CLUSTER }}  # Use GitHub secret
          export TASK_DEF=$(aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }} | jq -r '.taskDefinition.taskDefinitionArn')

          # Run the ECS Task for migration
          MIGRATION_TASK=$(aws ecs run-task \
            --cluster "$CLUSTER_NAME" \
            --launch-type FARGATE \
            --task-definition "$TASK_DEF" \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.AWS_SUBNETS }}],securityGroups=[${{ secrets.AWS_SECURITY_GROUP }}],assignPublicIp=DISABLED}" \
            --overrides '{"containerOverrides": [{"name": "markdowntailor-container","command":["pnpm","exec","db:migrate"]}]}' \
            --count 1 \
            | jq -r '.tasks[0].taskArn')

          # Wait for migration task to complete
          aws ecs wait tasks-stopped --cluster "$CLUSTER_NAME" --tasks "$MIGRATION_TASK"
          EXIT_CODE=$(aws ecs describe-tasks --cluster "$CLUSTER_NAME" --tasks "$MIGRATION_TASK" | jq -r '.tasks[0].containers[0].exitCode')
          if [ "$EXIT_CODE" != "0" ]; then
            echo "Migration failed! exit code $EXIT_CODE"
            exit 1
          else
            echo "Migration succeeded!"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -var="image_tag=${{ github.sha }}"
