name: CD - Deploy to AWS on Merge to Main

on:
  push:
    branches:
      - main

jobs:
  deploy:
    timeout-minutes: 30
    name: Build & Deploy
    runs-on: ubuntu-latest
    environment: production # Use the production environment defined in GitHub

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build app
        run: pnpm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ secrets.CONTAINER_NAME }} .
          docker tag ${{ secrets.CONTAINER_NAME }}:latest \
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}

      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}

      - name: Run db:migrate
        id: migrate
        run: |
          pnpm exec db:migrate --url ${{ secrets.DB_CONNECTION_URL }}  # Replace with your connection URL secret
        continue-on-error: false # This will cause the workflow to fail on error

      - name: Check Migration Success
        if: steps.migrate.outcome == 'failure'
        run: |
          echo "Migration failed! Exiting the workflow."
          exit 1  # This will stop the workflow

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -var="image_tag=${{ github.sha }}"

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -var="image_tag=${{ github.sha }}"
