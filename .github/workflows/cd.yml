name: CD - Deploy to AWS on Merge to Main

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPO_NAME: my-app-repo # üîÅ CHANGE to your ECR repo name
  CONTAINER_NAME: my-app-container # üîÅ CHANGE to match your Dockerfile image name
  TF_DIR: terraform # üîÅ CHANGE if your Terraform is in another dir
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    timeout-minutes: 10
    name: Build & Deploy
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "pnpm"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build app
        run: pnpm run build

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          role-to-assume: arn:aws:iam::<YOUR_ACCOUNT_ID>:role/<YOUR_ROLE_NAME>
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag Docker image
        run: |
          docker build -t ${{ env.CONTAINER_NAME }} .
          docker tag ${{ env.CONTAINER_NAME }}:latest \
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}

      - name: Push Docker image to ECR
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:${{ env.IMAGE_TAG }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -auto-approve -var="image_tag=${{ env.IMAGE_TAG }}"
