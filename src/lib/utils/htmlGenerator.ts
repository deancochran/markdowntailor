// lib/resume/htmlGenerator.ts
import React from "react";
import { flushSync } from "react-dom";
import { createRoot } from "react-dom/client";
import ReactMarkdown from "react-markdown";
import { sanitizeCSS } from "./sanitization";

/**
 * Generates HTML content from markdown and CSS, optimized for automatic page breaking
 * when printed or viewed in print preview.
 *
 * @param markdown The markdown string to convert to HTML.
 * @param css Custom CSS string to apply to the generated HTML.
 * @returns The complete HTML string ready for preview, printing, or download.
 */
export function generateHTMLContent(markdown: string, css: string): string {
  // Sanitize CSS before use - crucial for security
  const sanitizedCSS = sanitizeCSS(css);

  // Create a temporary container to properly render the markdown using ReactMarkdown.
  const tempContainer = document.createElement("div");
  const root = createRoot(tempContainer);

  flushSync(() => {
    // Render the markdown content to the temporary container.
    // ReactMarkdown is secure by default (does not render raw HTML by default).
    root.render(React.createElement(ReactMarkdown, {}, markdown));
  });

  // Extract the HTML content generated by ReactMarkdown.
  const markdownContent = tempContainer.innerHTML;

  return `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="UTF-8">
        <title>Document Print Preview</title>
        <style>
          /* User CSS - sanitized and applied last to allow custom overrides */
          ${sanitizedCSS}
        </style>
      </head>
      <body>
        ${markdownContent}
      </body>
    </html>
  `;
}

/**
 * Utility to download content as an HTML file
 */
export function downloadHTMLFile(title: string, htmlContent: string): void {
  const blob = new Blob([htmlContent], { type: "text/html" });
  const url = URL.createObjectURL(blob);

  const downloadLink = document.createElement("a");
  downloadLink.href = url;
  downloadLink.download = `${title.replace(/\s+/g, "-").toLowerCase()}.html`;
  document.body.appendChild(downloadLink);
  downloadLink.click();
  document.body.removeChild(downloadLink);

  // Clean up the URL object after download
  setTimeout(() => URL.revokeObjectURL(url), 100);
}
